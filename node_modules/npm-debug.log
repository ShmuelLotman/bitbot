0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node',
1 verbose cli   '/usr/local/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'contextify' ]
2 info using npm@1.4.3
3 info using node@v0.10.26
4 verbose cache add [ 'contextify', null ]
5 verbose cache add name=undefined spec="contextify" args=["contextify",null]
6 verbose parsed url { protocol: null,
6 verbose parsed url   slashes: null,
6 verbose parsed url   auth: null,
6 verbose parsed url   host: null,
6 verbose parsed url   port: null,
6 verbose parsed url   hostname: null,
6 verbose parsed url   hash: null,
6 verbose parsed url   search: null,
6 verbose parsed url   query: null,
6 verbose parsed url   pathname: 'contextify',
6 verbose parsed url   path: 'contextify',
6 verbose parsed url   href: 'contextify' }
7 silly lockFile e90e8b6a-contextify contextify
8 verbose lock contextify /Users/nunohora/.npm/e90e8b6a-contextify.lock
9 silly lockFile e90e8b6a-contextify contextify
10 silly lockFile e90e8b6a-contextify contextify
11 verbose addNamed [ 'contextify', '' ]
12 verbose addNamed [ null, '*' ]
13 silly lockFile 902bbeb2-contextify contextify@
14 verbose lock contextify@ /Users/nunohora/.npm/902bbeb2-contextify.lock
15 silly addNameRange { name: 'contextify', range: '*', hasData: false }
16 verbose url raw contextify
17 verbose url resolving [ 'https://registry.npmjs.org/', './contextify' ]
18 verbose url resolved https://registry.npmjs.org/contextify
19 info trying registry request attempt 1 at 22:59:17
20 verbose etag "CC07FO32MVQ7IM5ZN3CPVF619"
21 http GET https://registry.npmjs.org/contextify
22 http 304 https://registry.npmjs.org/contextify
23 silly registry.get cb [ 304,
23 silly registry.get   { date: 'Wed, 26 Mar 2014 22:59:17 GMT',
23 silly registry.get     server: 'Apache',
23 silly registry.get     via: '1.1 varnish',
23 silly registry.get     'last-modified': 'Wed, 26 Mar 2014 22:59:17 GMT',
23 silly registry.get     'cache-control': 'max-age=1',
23 silly registry.get     etag: '"CC07FO32MVQ7IM5ZN3CPVF619"',
23 silly registry.get     'x-served-by': 'cache-am69-AMS',
23 silly registry.get     'x-cache': 'MISS',
23 silly registry.get     'x-cache-hits': '0',
23 silly registry.get     'x-timer': 'S1395874757.803273439,VS0,VE103',
23 silly registry.get     vary: 'Accept',
23 silly registry.get     'content-length': '0',
23 silly registry.get     'keep-alive': 'timeout=10, max=50',
23 silly registry.get     connection: 'Keep-Alive' } ]
24 verbose etag contextify from cache
25 silly addNameRange number 2 { name: 'contextify', range: '*', hasData: true }
26 silly addNameRange versions [ 'contextify',
26 silly addNameRange   [ '0.0.2',
26 silly addNameRange     '0.0.3',
26 silly addNameRange     '0.0.4',
26 silly addNameRange     '0.0.5',
26 silly addNameRange     '0.0.6',
26 silly addNameRange     '0.0.7',
26 silly addNameRange     '0.1.0',
26 silly addNameRange     '0.1.1',
26 silly addNameRange     '0.1.2',
26 silly addNameRange     '0.1.3',
26 silly addNameRange     '0.1.4',
26 silly addNameRange     '0.1.5',
26 silly addNameRange     '0.1.6',
26 silly addNameRange     '0.1.7' ] ]
27 verbose addNamed [ 'contextify', '0.1.7' ]
28 verbose addNamed [ '0.1.7', '0.1.7' ]
29 silly lockFile df1d1460-contextify-0-1-7 contextify@0.1.7
30 verbose lock contextify@0.1.7 /Users/nunohora/.npm/df1d1460-contextify-0-1-7.lock
31 silly lockFile df1d1460-contextify-0-1-7 contextify@0.1.7
32 silly lockFile df1d1460-contextify-0-1-7 contextify@0.1.7
33 silly lockFile 902bbeb2-contextify contextify@
34 silly lockFile 902bbeb2-contextify contextify@
35 silly resolved [ { name: 'contextify',
35 silly resolved     version: '0.1.7',
35 silly resolved     description: 'Turn an object into a persistent execution context.',
35 silly resolved     author: { name: 'Brian McDaniel', email: 'brianmcd05@gmail.com' },
35 silly resolved     contributors: [ [Object] ],
35 silly resolved     keywords: [ 'context', 'vm' ],
35 silly resolved     repository:
35 silly resolved      { type: 'git',
35 silly resolved        url: 'https://github.com/brianmcd/contextify.git' },
35 silly resolved     main: './lib/contextify',
35 silly resolved     scripts: { test: 'nodeunit test/', install: 'node-gyp rebuild' },
35 silly resolved     engines: { node: '>=0.4.0' },
35 silly resolved     licenses: [ [Object] ],
35 silly resolved     dependencies: { bindings: '*', nan: '~0.8.0' },
35 silly resolved     devDependencies: { nodeunit: '>=0.5.x' },
35 silly resolved     gypfile: true,
35 silly resolved     readme: '# Contextify\n\nFor Windows issues, see here: https://github.com/brianmcd/contextify/wiki/Windows-Installation-Guide\n\nPlease add to the wiki if you find new issues/solutions.\n\nTurn an object into a V8 execution context.  A contextified object acts as the global \'this\' when executing scripts in its context.  Contextify adds 3 methods to the contextified object: run(code, filename), getGlobal(), and dispose().  The main difference between Contextify and Node\'s vm methods is that Contextify allows asynchronous functions to continue executing in the Contextified object\'s context.  See vm vs. Contextify below for more discussion.\n\n## Examples\n```javascript\nvar Contextify = require(\'contextify\');\nvar sandbox = { console : console, prop1 : \'prop1\'};\nContextify(sandbox);\nsandbox.run(\'console.log(prop1);\');\nsandbox.dispose(); // free the resources allocated for the context.\n```\n\n```javascript\nvar sandbox = Contextify(); // returns an empty contextified object.\nsandbox.run(\'var x = 3;\');\nconsole.log(sandbox.x); // prints 3\nsandbox.dispose();\n```\n\n```javascript\nvar sandbox = Contextify({setTimeout : setTimeout});\nsandbox.run("setTimeout(function () { x = 3; }, 5);");\nconsole.log(sandbox.x); // prints undefined\nsetTimeout(function () {\n    console.log(sandbox.x); // prints 3\n    sandbox.dispose();\n}, 10);\n```\n## Details\n\n**Contextify([sandbox])**\n\n    sandbox - The object to contextify, which will be modified as described below\n              If no sandbox is specified, an empty object will be allocated and used instead.\n\n    Returns the contextified object.  It doesn\'t make a copy, so if you already have a reference\n    to the sandbox, you don\'t need to catch the return value.\n\nA Contextified object has 2 methods added to it:\n\n**run(code, [filename])**\n\n    code - string containing JavaScript to execute\n    filename  - an optional filename for debugging.\n\n    Runs the code in the Contextified object\'s context.\n\n**getGlobal()**\n\nReturns the actual global object for the V8 context.  The global object is initialized with interceptors (discussed below) which forward accesses on it to the contextified object.  This means the contextified object acts like the global object in most cases.  Sometimes, though, you need to make a reference to the actual global object.\n\nFor example:\n\n```javascript\nvar window = Contextify({console : console});\nwindow.window = window;\nwindow.run("console.log(window === this);");\n// prints false.\n```\n\n```javascript\nvar window = Contextify({console : console});\nwindow.window = window.getGlobal();\nwindow.run("console.log(window === this);");\n// prints true\n```\n\nThe global object returned by getGlobal() can be treated like the contextified sandbox object, except that defining getters/setters will not work on it.  Define getters and setters on the actual sandbox object instead.\n\n**dispose()**\n\nFrees the memory allocated for the underlying V8 context.  If you don\'t call this when you\'re done, the V8 context memory will leak, as will the sandbox memory, since the context\'s global stores a strong reference to the sandbox object.  You can still use your sandbox object after calling dispose(), but it\'s unsafe to use a global previously returned from getGlobal().  run, getGlobal, and dispose will be removed from the sandbox object.\n\n## Install\n\n    npm install contextify\n\n## require(\'vm\') vs. Contextify\n\nNode\'s vm functions (runInContext etc) work by copying the values from the sandbox object onto a context\'s global object, executing the passed in script, then copying the results back.  This means that scripts that create asynchronous functions (using mechanisms like setTimeout) won\'t have see the results of executing those functions, since the copying in/out only occurs during an explicit call to runInContext and friends.  \n\nContextify creates a V8 context, and uses interceptors (see: http://code.google.com/apis/v8/embed.html#interceptors) to forward global object accesses to the sandbox object.  This means there is no copying in or out, so asynchronous functions have the expected effect on the sandbox object.  \n\n## Tests\n\nTesting is done with nodeunit.  Run the tests with\n\n    nodeunit test/\n\nOutput: \n\n    OK: 92 assertions (27ms)\n\n\n## Building\n\n    node-waf configure build\n\n## Acknowledgments\n\nInspiration taken from Assaf\'s Zombie.js context solution: https://github.com/assaf/zombie\n',
35 silly resolved     readmeFilename: 'README.md',
35 silly resolved     bugs: { url: 'https://github.com/brianmcd/contextify/issues' },
35 silly resolved     homepage: 'https://github.com/brianmcd/contextify',
35 silly resolved     _id: 'contextify@0.1.7',
35 silly resolved     _from: 'contextify@' } ]
36 info install contextify@0.1.7 into /usr/local/lib
37 info installOne contextify@0.1.7
38 info /usr/local/lib/node_modules/contextify unbuild
39 verbose tar unpack /Users/nunohora/.npm/contextify/0.1.7/package.tgz
40 silly lockFile 38d9f712-ocal-lib-node-modules-contextify tar:///usr/local/lib/node_modules/contextify
41 verbose lock tar:///usr/local/lib/node_modules/contextify /Users/nunohora/.npm/38d9f712-ocal-lib-node-modules-contextify.lock
42 silly lockFile bc4ba2be-npm-contextify-0-1-7-package-tgz tar:///Users/nunohora/.npm/contextify/0.1.7/package.tgz
43 verbose lock tar:///Users/nunohora/.npm/contextify/0.1.7/package.tgz /Users/nunohora/.npm/bc4ba2be-npm-contextify-0-1-7-package-tgz.lock
44 silly gunzTarPerm modes [ '755', '644' ]
45 silly gunzTarPerm extractEntry package.json
46 silly gunzTarPerm extractEntry .npmignore
47 silly gunzTarPerm extractEntry README.md
48 silly gunzTarPerm extractEntry LICENSE.txt
49 silly gunzTarPerm extractEntry binding.gyp
50 silly gunzTarPerm extractEntry changelog
51 silly gunzTarPerm extractEntry lib/contextify.js
52 silly gunzTarPerm extractEntry src/contextify.cc
53 silly gunzTarPerm extractEntry test/contextify.js
54 silly gunzTarPerm extractEntry wscript
55 silly lockFile 38d9f712-ocal-lib-node-modules-contextify tar:///usr/local/lib/node_modules/contextify
56 silly lockFile 38d9f712-ocal-lib-node-modules-contextify tar:///usr/local/lib/node_modules/contextify
57 silly lockFile bc4ba2be-npm-contextify-0-1-7-package-tgz tar:///Users/nunohora/.npm/contextify/0.1.7/package.tgz
58 silly lockFile bc4ba2be-npm-contextify-0-1-7-package-tgz tar:///Users/nunohora/.npm/contextify/0.1.7/package.tgz
59 info preinstall contextify@0.1.7
60 verbose readDependencies using package.json deps
61 verbose readDependencies using package.json deps
62 verbose cache add [ 'bindings@*', null ]
63 verbose cache add name=undefined spec="bindings@*" args=["bindings@*",null]
64 verbose parsed url { protocol: null,
64 verbose parsed url   slashes: null,
64 verbose parsed url   auth: null,
64 verbose parsed url   host: null,
64 verbose parsed url   port: null,
64 verbose parsed url   hostname: null,
64 verbose parsed url   hash: null,
64 verbose parsed url   search: null,
64 verbose parsed url   query: null,
64 verbose parsed url   pathname: 'bindings@*',
64 verbose parsed url   path: 'bindings@*',
64 verbose parsed url   href: 'bindings@*' }
65 verbose cache add name="bindings" spec="*" args=["bindings","*"]
66 verbose parsed url { protocol: null,
66 verbose parsed url   slashes: null,
66 verbose parsed url   auth: null,
66 verbose parsed url   host: null,
66 verbose parsed url   port: null,
66 verbose parsed url   hostname: null,
66 verbose parsed url   hash: null,
66 verbose parsed url   search: null,
66 verbose parsed url   query: null,
66 verbose parsed url   pathname: '*',
66 verbose parsed url   path: '*',
66 verbose parsed url   href: '*' }
67 verbose addNamed [ 'bindings', '*' ]
68 verbose addNamed [ null, '*' ]
69 silly lockFile a3858fc2-bindings bindings@*
70 verbose lock bindings@* /Users/nunohora/.npm/a3858fc2-bindings.lock
71 verbose cache add [ 'nan@~0.8.0', null ]
72 verbose cache add name=undefined spec="nan@~0.8.0" args=["nan@~0.8.0",null]
73 verbose parsed url { protocol: null,
73 verbose parsed url   slashes: null,
73 verbose parsed url   auth: null,
73 verbose parsed url   host: null,
73 verbose parsed url   port: null,
73 verbose parsed url   hostname: null,
73 verbose parsed url   hash: null,
73 verbose parsed url   search: null,
73 verbose parsed url   query: null,
73 verbose parsed url   pathname: 'nan@~0.8.0',
73 verbose parsed url   path: 'nan@~0.8.0',
73 verbose parsed url   href: 'nan@~0.8.0' }
74 verbose cache add name="nan" spec="~0.8.0" args=["nan","~0.8.0"]
75 verbose parsed url { protocol: null,
75 verbose parsed url   slashes: null,
75 verbose parsed url   auth: null,
75 verbose parsed url   host: null,
75 verbose parsed url   port: null,
75 verbose parsed url   hostname: null,
75 verbose parsed url   hash: null,
75 verbose parsed url   search: null,
75 verbose parsed url   query: null,
75 verbose parsed url   pathname: '~0.8.0',
75 verbose parsed url   path: '~0.8.0',
75 verbose parsed url   href: '~0.8.0' }
76 verbose addNamed [ 'nan', '~0.8.0' ]
77 verbose addNamed [ null, '>=0.8.0-0 <0.9.0-0' ]
78 silly lockFile d5ae64ea-nan-0-8-0 nan@~0.8.0
79 verbose lock nan@~0.8.0 /Users/nunohora/.npm/d5ae64ea-nan-0-8-0.lock
80 silly addNameRange { name: 'bindings', range: '*', hasData: false }
81 silly addNameRange { name: 'nan', range: '>=0.8.0-0 <0.9.0-0', hasData: false }
82 verbose url raw bindings
83 verbose url resolving [ 'https://registry.npmjs.org/', './bindings' ]
84 verbose url resolved https://registry.npmjs.org/bindings
85 info trying registry request attempt 1 at 23:00:07
86 verbose etag "D8YNNF532Z87MUTG0SNA7AVV"
87 http GET https://registry.npmjs.org/bindings
88 verbose url raw nan
89 verbose url resolving [ 'https://registry.npmjs.org/', './nan' ]
90 verbose url resolved https://registry.npmjs.org/nan
91 info trying registry request attempt 1 at 23:00:07
92 verbose etag "7ZCRTAGS6D8FSO4W8HHNE2O6S"
93 http GET https://registry.npmjs.org/nan
94 http 304 https://registry.npmjs.org/nan
95 silly registry.get cb [ 304,
95 silly registry.get   { date: 'Wed, 26 Mar 2014 23:00:07 GMT',
95 silly registry.get     server: 'Apache',
95 silly registry.get     via: '1.1 varnish',
95 silly registry.get     'last-modified': 'Wed, 26 Mar 2014 23:00:07 GMT',
95 silly registry.get     'cache-control': 'max-age=1',
95 silly registry.get     etag: '"7ZCRTAGS6D8FSO4W8HHNE2O6S"',
95 silly registry.get     'x-served-by': 'cache-am70-AMS',
95 silly registry.get     'x-cache': 'HIT',
95 silly registry.get     'x-cache-hits': '1',
95 silly registry.get     'x-timer': 'S1395874807.573690414,VS0,VE89',
95 silly registry.get     vary: 'Accept',
95 silly registry.get     'content-length': '0',
95 silly registry.get     'keep-alive': 'timeout=10, max=50',
95 silly registry.get     connection: 'Keep-Alive' } ]
96 verbose etag nan from cache
97 silly addNameRange number 2 { name: 'nan', range: '>=0.8.0-0 <0.9.0-0', hasData: true }
98 silly addNameRange versions [ 'nan',
98 silly addNameRange   [ '0.3.0-wip',
98 silly addNameRange     '0.3.0-wip2',
98 silly addNameRange     '0.3.0',
98 silly addNameRange     '0.3.1',
98 silly addNameRange     '0.3.2',
98 silly addNameRange     '0.4.0',
98 silly addNameRange     '0.4.1',
98 silly addNameRange     '0.4.2',
98 silly addNameRange     '0.4.3',
98 silly addNameRange     '0.4.4',
98 silly addNameRange     '0.5.0',
98 silly addNameRange     '0.5.1',
98 silly addNameRange     '0.5.2',
98 silly addNameRange     '0.6.0',
98 silly addNameRange     '0.7.0',
98 silly addNameRange     '0.7.1',
98 silly addNameRange     '0.8.0' ] ]
99 verbose addNamed [ 'nan', '0.8.0' ]
100 verbose addNamed [ '0.8.0', '0.8.0' ]
101 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
102 verbose lock nan@0.8.0 /Users/nunohora/.npm/46761758-nan-0-8-0.lock
103 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
104 silly lockFile 46761758-nan-0-8-0 nan@0.8.0
105 silly lockFile d5ae64ea-nan-0-8-0 nan@~0.8.0
106 silly lockFile d5ae64ea-nan-0-8-0 nan@~0.8.0
107 http 304 https://registry.npmjs.org/bindings
108 silly registry.get cb [ 304,
108 silly registry.get   { date: 'Wed, 26 Mar 2014 23:00:07 GMT',
108 silly registry.get     server: 'Apache',
108 silly registry.get     via: '1.1 varnish',
108 silly registry.get     'last-modified': 'Wed, 26 Mar 2014 23:00:07 GMT',
108 silly registry.get     'cache-control': 'max-age=1',
108 silly registry.get     etag: '"D8YNNF532Z87MUTG0SNA7AVV"',
108 silly registry.get     'x-served-by': 'cache-am77-AMS',
108 silly registry.get     'x-cache': 'HIT',
108 silly registry.get     'x-cache-hits': '1',
108 silly registry.get     'x-timer': 'S1395874807.593964338,VS0,VE177',
108 silly registry.get     vary: 'Accept',
108 silly registry.get     'content-length': '0',
108 silly registry.get     'keep-alive': 'timeout=10, max=50',
108 silly registry.get     connection: 'Keep-Alive' } ]
109 verbose etag bindings from cache
110 silly addNameRange number 2 { name: 'bindings', range: '*', hasData: true }
111 silly addNameRange versions [ 'bindings',
111 silly addNameRange   [ '0.0.1',
111 silly addNameRange     '0.1.0',
111 silly addNameRange     '0.1.1',
111 silly addNameRange     '0.2.0',
111 silly addNameRange     '0.2.1',
111 silly addNameRange     '0.2.2',
111 silly addNameRange     '0.2.3',
111 silly addNameRange     '0.2.4',
111 silly addNameRange     '0.3.0',
111 silly addNameRange     '0.4.0',
111 silly addNameRange     '1.0.0',
111 silly addNameRange     '1.1.0',
111 silly addNameRange     '1.1.1' ] ]
112 verbose addNamed [ 'bindings', '1.1.1' ]
113 verbose addNamed [ '1.1.1', '1.1.1' ]
114 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
115 verbose lock bindings@1.1.1 /Users/nunohora/.npm/52dd60a7-bindings-1-1-1.lock
116 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
117 silly lockFile 52dd60a7-bindings-1-1-1 bindings@1.1.1
118 silly lockFile a3858fc2-bindings bindings@*
119 silly lockFile a3858fc2-bindings bindings@*
120 silly resolved [ { name: 'nan',
120 silly resolved     version: '0.8.0',
120 silly resolved     description: 'Native Abstractions for Node.js: C++ header for Node 0.8->0.12 compatibility',
120 silly resolved     main: 'include_dirs.js',
120 silly resolved     repository: { type: 'git', url: 'git://github.com/rvagg/nan.git' },
120 silly resolved     contributors: [ [Object], [Object], [Object], [Object], [Object], [Object] ],
120 silly resolved     license: 'MIT',
120 silly resolved     readme: 'Native Abstractions for Node.js\n===============================\n\n**A header file filled with macro and utility goodness for making add-on development for Node.js easier across versions 0.8, 0.10 and 0.11, and eventually 0.12.**\n\n***Current version: 0.8.0*** *(See [nan.h](https://github.com/rvagg/nan/blob/master/nan.h) for complete ChangeLog)*\n\n[![NPM](https://nodei.co/npm/nan.png?downloads=true)](https://nodei.co/npm/nan/) [![NPM](https://nodei.co/npm-dl/nan.png?months=6)](https://nodei.co/npm/nan/)\n\nThanks to the crazy changes in V8 (and some in Node core), keeping native addons compiling happily across versions, particularly 0.10 to 0.11/0.12, is a minor nightmare. The goal of this project is to store all logic necessary to develop native Node.js addons without having to inspect `NODE_MODULE_VERSION` and get yourself into a macro-tangle.\n\nThis project also contains some helper utilities that make addon development a bit more pleasant.\n\n * **[News & Updates](#news)**\n * **[Usage](#usage)**\n * **[Example](#example)**\n * **[API](#api)**\n\n<a name="news"></a>\n## News & Updates\n\n### Dec-2013: NanCString and NanRawString\n\nTwo new functions have been introduced to replace the functionality that\'s been provided by `NanFromV8String` until now. NanCString has sensible defaults so it\'s super easy to fetch a null-terminated c-style string out of a `v8::String`. `NanFromV8String` is still around and has defaults that allow you to pass a single handle to fetch a `char*` while `NanRawString` requires a little more attention to arguments.\n\n### Nov-2013: Node 0.11.9+ breaking V8 change\n\nThe version of V8 that\'s shipping with Node 0.11.9+ has changed the signature for new `Local`s to: `v8::Local<T>::New(isolate, value)`, i.e. introducing the `isolate` argument and therefore breaking all new `Local` declarations for previous versions. NAN 0.6+ now includes a `NanNewLocal<T>(value)` that can be used in place to work around this incompatibility and maintain compatibility with 0.8->0.11.9+ (minus a few early 0.11 releases).\n\nFor example, if you wanted to return a `null` on a callback you will have to change the argument from `v8::Local<v8::Value>::New(v8::Null())` to `NanNewLocal<v8::Value>(v8::Null())`.\n\n### Nov-2013: Change to binding.gyp `"include_dirs"` for NAN\n\nInclusion of NAN in a project\'s binding.gyp is now greatly simplified. You can now just use `"<!(node -e \\"require(\'nan\')\\")"` in your `"include_dirs"`, see example below (note Windows needs the quoting around `require` to be just right: `"require(\'nan\')"` with appropriate `\\` escaping).\n\n<a name="usage"></a>\n## Usage\n\nSimply add **NAN** as a dependency in the *package.json* of your Node addon:\n\n``` bash\n$ npm install --save nan\n```\n\nPull in the path to **NAN** in your *binding.gyp* so that you can use `#include "nan.h"` in your *.cpp* files:\n\n``` python\n"include_dirs" : [\n    "<!(node -e \\"require(\'nan\')\\")"\n]\n```\n\nThis works like a `-I<path-to-NAN>` when compiling your addon.\n\n<a name="example"></a>\n## Example\n\nSee **[LevelDOWN](https://github.com/rvagg/node-leveldown/pull/48)** for a full example of **NAN** in use.\n\nFor a simpler example, see the **[async pi estimation example](https://github.com/rvagg/nan/tree/master/examples/async_pi_estimate)** in the examples directory for full code and an explanation of what this Monte Carlo Pi estimation example does. Below are just some parts of the full example that illustrate the use of **NAN**.\n\nCompare to the current 0.10 version of this example, found in the [node-addon-examples](https://github.com/rvagg/node-addon-examples/tree/master/9_async_work) repository and also a 0.11 version of the same found [here](https://github.com/kkoopa/node-addon-examples/tree/5c01f58fc993377a567812597e54a83af69686d7/9_async_work).\n\nNote that there is no embedded version sniffing going on here and also the async work is made much simpler, see below for details on the `NanAsyncWorker` class.\n\n```c++\n// addon.cc\n#include <node.h>\n#include "nan.h"\n// ...\n\nusing namespace v8;\n\nvoid InitAll(Handle<Object> exports) {\n  exports->Set(NanSymbol("calculateSync"),\n    FunctionTemplate::New(CalculateSync)->GetFunction());\n\n  exports->Set(NanSymbol("calculateAsync"),\n    FunctionTemplate::New(CalculateAsync)->GetFunction());\n}\n\nNODE_MODULE(addon, InitAll)\n```\n\n```c++\n// sync.h\n#include <node.h>\n#include "nan.h"\n\nNAN_METHOD(CalculateSync);\n```\n\n```c++\n// sync.cc\n#include <node.h>\n#include "nan.h"\n#include "sync.h"\n// ...\n\nusing namespace v8;\n\n// Simple synchronous access to the `Estimate()` function\nNAN_METHOD(CalculateSync) {\n  NanScope();\n\n  // expect a number as the first argument\n  int points = args[0]->Uint32Value();\n  double est = Estimate(points);\n\n  NanReturnValue(Number::New(est));\n}\n```\n\n```c++\n// async.cc\n#include <node.h>\n#include "nan.h"\n#include "async.h"\n\n// ...\n\nusing namespace v8;\n\nclass PiWorker : public NanAsyncWorker {\n public:\n  PiWorker(NanCallback *callback, int points)\n    : NanAsyncWorker(callback), points(points) {}\n  ~PiWorker() {}\n\n  // Executed inside the worker-thread.\n  // It is not safe to access V8, or V8 data structures\n  // here, so everything we need for input and output\n  // should go on `this`.\n  void Execute () {\n    estimate = Estimate(points);\n  }\n\n  // Executed when the async work is complete\n  // this function will be run inside the main event loop\n  // so it is safe to use V8 again\n  void HandleOKCallback () {\n    NanScope();\n\n    Local<Value> argv[] = {\n        Local<Value>::New(Null())\n      , Number::New(estimate)\n    };\n\n    callback->Call(2, argv);\n  };\n\n private:\n  int points;\n  double estimate;\n};\n\n// Asynchronous access to the `Estimate()` function\nNAN_METHOD(CalculateAsync) {\n  NanScope();\n\n  int points = args[0]->Uint32Value();\n  NanCallback *callback = new NanCallback(args[1].As<Function>());\n\n  NanAsyncQueueWorker(new PiWorker(callback, points));\n  NanReturnUndefined();\n}\n```\n\n<a name="api"></a>\n## API\n\n * <a href="#api_nan_method"><b><code>NAN_METHOD</code></b></a>\n * <a href="#api_nan_getter"><b><code>NAN_GETTER</code></b></a>\n * <a href="#api_nan_setter"><b><code>NAN_SETTER</code></b></a>\n * <a href="#api_nan_property_getter"><b><code>NAN_PROPERTY_GETTER</code></b></a>\n * <a href="#api_nan_property_setter"><b><code>NAN_PROPERTY_SETTER</code></b></a>\n * <a href="#api_nan_property_enumerator"><b><code>NAN_PROPERTY_ENUMERATOR</code></b></a>\n * <a href="#api_nan_property_deleter"><b><code>NAN_PROPERTY_DELETER</code></b></a>\n * <a href="#api_nan_property_query"><b><code>NAN_PROPERTY_QUERY</code></b></a>\n * <a href="#api_nan_index_getter"><b><code>NAN_INDEX_GETTER</code></b></a>\n * <a href="#api_nan_index_setter"><b><code>NAN_INDEX_SETTER</code></b></a>\n * <a href="#api_nan_index_enumerator"><b><code>NAN_INDEX_ENUMERATOR</code></b></a>\n * <a href="#api_nan_index_deleter"><b><code>NAN_INDEX_DELETER</code></b></a>\n * <a href="#api_nan_index_query"><b><code>NAN_INDEX_QUERY</code></b></a>\n * <a href="#api_nan_weak_callback"><b><code>NAN_WEAK_CALLBACK</code></b></a>\n * <a href="#api_nan_deprecated"><b><code>NAN_DEPRECATED</code></b></a>\n * <a href="#api_nan_inline"><b><code>NAN_INLINE</code></b></a> \n * <a href="#api_nan_new_local"><b><code>NanNewLocal</code></b></a>\n * <a href="#api_nan_return_value"><b><code>NanReturnValue</code></b></a>\n * <a href="#api_nan_return_undefined"><b><code>NanReturnUndefined</code></b></a>\n * <a href="#api_nan_return_null"><b><code>NanReturnNull</code></b></a>\n * <a href="#api_nan_return_empty_string"><b><code>NanReturnEmptyString</code></b></a>\n * <a href="#api_nan_scope"><b><code>NanScope</code></b></a>\n * <a href="#api_nan_locker"><b><code>NanLocker</code></b></a>\n * <a href="#api_nan_unlocker"><b><code>NanUnlocker</code></b></a>\n * <a href="#api_nan_get_internal_field_pointer"><b><code>NanGetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_set_internal_field_pointer"><b><code>NanSetInternalFieldPointer</code></b></a>\n * <a href="#api_nan_object_wrap_handle"><b><code>NanObjectWrapHandle</code></b></a>\n * <a href="#api_nan_make_weak"><b><code>NanMakeWeak</code></b></a>\n * <a href="#api_nan_symbol"><b><code>NanSymbol</code></b></a>\n * <a href="#api_nan_get_pointer_safe"><b><code>NanGetPointerSafe</code></b></a>\n * <a href="#api_nan_set_pointer_safe"><b><code>NanSetPointerSafe</code></b></a>\n * <a href="#api_nan_raw_string"><b><code>NanRawString</code></b></a>\n * <a href="#api_nan_c_string"><b><code>NanCString</code></b></a>\n * <a href="#api_nan_from_v8_string"><b><code>NanFromV8String</code></b></a>\n * <a href="#api_nan_boolean_option_value"><b><code>NanBooleanOptionValue</code></b></a>\n * <a href="#api_nan_uint32_option_value"><b><code>NanUInt32OptionValue</code></b></a>\n * <a href="#api_nan_error"><b><code>NanError</code></b>, <b><code>NanTypeError</code></b>, <b><code>NanRangeError</code></b></a>\n * <a href="#api_nan_throw_error"><b><code>NanThrowError</code></b>, <b><code>NanThrowTypeError</code></b>, <b><code>NanThrowRangeError</code></b>, <b><code>NanThrowError(Handle<Value>)</code></b>, <b><code>NanThrowError(Handle<Value>, int)</code></b></a>\n * <a href="#api_nan_new_buffer_handle"><b><code>NanNewBufferHandle(char *, size_t, FreeCallback, void *)</code></b>, <b><code>NanNewBufferHandle(char *, uint32_t)</code></b>, <b><code>NanNewBufferHandle(uint32_t)</code></b></a>\n * <a href="#api_nan_buffer_use"><b><code>NanBufferUse(char *, uint32_t)</code></b></a>\n * <a href="#api_nan_new_context_handle"><b><code>NanNewContextHandle</code></b></a>\n * <a href="#api_nan_has_instance"><b><code>NanHasInstance</code></b></a>\n * <a href="#api_nan_persistent_to_local"><b><code>NanPersistentToLocal</code></b></a>\n * <a href="#api_nan_dispose_persistent"><b><code>NanDisposePersistent</code></b></a>\n * <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a>\n * <a href="#api_nan_init_persistent"><b><code>NanInitPersistent</code></b></a>\n * <a href="#api_nan_callback"><b><code>NanCallback</code></b></a>\n * <a href="#api_nan_async_worker"><b><code>NanAsyncWorker</code></b></a>\n * <a href="#api_nan_async_queue_worker"><b><code>NanAsyncQueueWorker</code></b></a>\n\n<a name="api_nan_method"></a>\n### NAN_METHOD(methodname)\n\nUse `NAN_METHOD` to define your V8 accessible methods:\n\n```c++\n// .h:\nclass Foo : public node::ObjectWrap {\n  ...\n\n  static NAN_METHOD(Bar);\n  static NAN_METHOD(Baz);\n}\n\n\n// .cc:\nNAN_METHOD(Foo::Bar) {\n  ...\n}\n\nNAN_METHOD(Foo::Baz) {\n  ...\n}\n```\n\nThe reason for this macro is because of the method signature change in 0.11:\n\n```c++\n// 0.10 and below:\nHandle<Value> name(const Arguments& args)\n\n// 0.11 and above\nvoid name(const FunctionCallbackInfo<Value>& args)\n```\n\nThe introduction of `FunctionCallbackInfo` brings additional complications:\n\n<a name="api_nan_getter"></a>\n### NAN_GETTER(methodname)\n\nUse `NAN_GETTER` to declare your V8 accessible getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act like the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_GETTER`.\n\n<a name="api_nan_setter"></a>\n### NAN_SETTER(methodname)\n\nUse `NAN_SETTER` to declare your V8 accessible setters. Same as `NAN_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_getter"></a>\n### NAN_PROPERTY_GETTER(cbname)\nUse `NAN_PROPERTY_GETTER` to declare your V8 accessible property getters. You get a `Local<String>` `property` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_GETTER`.\n\n<a name="api_nan_property_setter"></a>\n### NAN_PROPERTY_SETTER(cbname)\nUse `NAN_PROPERTY_SETTER` to declare your V8 accessible property setters. Same as `NAN_PROPERTY_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_property_enumerator"></a>\n### NAN_PROPERTY_ENUMERATOR(cbname)\nUse `NAN_PROPERTY_ENUMERATOR` to declare your V8 accessible property enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_PROPERTY_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_ENUMERATOR`.\n\n<a name="api_nan_property_deleter"></a>\n### NAN_PROPERTY_DELETER(cbname)\nUse `NAN_PROPERTY_DELETER` to declare your V8 accessible property deleters. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_DELETER`.\n\n<a name="api_nan_property_query"></a>\n### NAN_PROPERTY_QUERY(cbname)\nUse `NAN_PROPERTY_QUERY` to declare your V8 accessible property queries. Same as `NAN_PROPERTY_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_PROPERTY_QUERY`.\n\n<a name="api_nan_index_getter"></a>\n### NAN_INDEX_GETTER(cbname)\nUse `NAN_INDEX_GETTER` to declare your V8 accessible index getters. You get a `uint32_t` `index` and an appropriately typed `args` object that can act similar to the `args` argument to a `NAN_METHOD` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_GETTER`.\n\n<a name="api_nan_index_setter"></a>\n### NAN_INDEX_SETTER(cbname)\nUse `NAN_INDEX_SETTER` to declare your V8 accessible index setters. Same as `NAN_INDEX_GETTER` but you also get a `Local<Value>` `value` object to work with.\n\n<a name="api_nan_index_enumerator"></a>\n### NAN_INDEX_ENUMERATOR(cbname)\nUse `NAN_INDEX_ENUMERATOR` to declare your V8 accessible index enumerators. You get an appropriately typed `args` object like the `args` argument to a `NAN_INDEX_GETTER` call.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_ENUMERATOR`.\n\n<a name="api_nan_index_deleter"></a>\n### NAN_INDEX_DELETER(cbname)\nUse `NAN_INDEX_DELETER` to declare your V8 accessible index deleters. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_DELETER`.\n\n<a name="api_nan_index_query"></a>\n### NAN_INDEX_QUERY(cbname)\nUse `NAN_INDEX_QUERY` to declare your V8 accessible index queries. Same as `NAN_INDEX_GETTER`.\n\nYou can use `NanReturnNull()`, `NanReturnEmptyString()`, `NanReturnUndefined()` and `NanReturnValue()` in a `NAN_INDEX_QUERY`.\n\n<a name="api_nan_weak_callback"></a>\n### NAN_WEAK_CALLBACK(type, cbname)\n\nUse `NAN_WEAK_CALLBACK` to declare your V8 WeakReference callbacks. There is an object argument accessible through `NAN_WEAK_CALLBACK_OBJECT`. The `type` argument gives the type of the `data` argument, accessible through `NAN_WEAK_CALLBACK_DATA(type)`.\n\n```c++\nstatic NAN_WEAK_CALLBACK(BufferReference*, WeakCheck) {\n  if (NAN_WEAK_CALLBACK_DATA(BufferReference*)->noLongerNeeded_) {\n    delete NAN_WEAK_CALLBACK_DATA(BufferReference*);\n  } else {\n    // Still in use, revive, prevent GC\n    NanMakeWeak(NAN_WEAK_CALLBACK_OBJECT, NAN_WEAK_CALLBACK_DATA(BufferReference*), &WeakCheck);\n  }\n}\n```\n\n<a name="api_nan_deprecated"></a>\n### NAN_DEPRECATED(declarator)\nDeclares a function as deprecated. Identical to `V8_DEPRECATED`.\n\n```c++\nstatic NAN_DEPRECATED(NAN_METHOD(foo)) {\n  ...\n}\n```\n\n<a name="api_nan_inline"></a>\n### NAN_INLINE(declarator)\nInlines a function. Identical to `V8_INLINE`.\n\n```c++\nstatic NAN_INLINE(int foo(int bar)) {\n  ...\n}\n```\n\n<a name="api_nan_new_local"></a>\n### NanNewLocal&lt;T&gt;(Handle&lt;Value&gt;)\n\nUse `NanNewLocal` in place of `v8::Local<T>::New(...)` as this function\nrequires an `isolate` argument in recent versions of V8 but not in older versions.\n\n```c++\nNanNewLocal<v8::Value>(v8::Null())\n```\n\n<a name="api_nan_return_value"></a>\n### NanReturnValue(Handle&lt;Value&gt;)\n\nUse `NanReturnValue` when you want to return a value from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  ...\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\nNo `return` statement required.\n\n<a name="api_nan_return_undefined"></a>\n### NanReturnUndefined()\n\nUse `NanReturnUndefined` when you don\'t want to return anything from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnUndefined();\n}\n```\n\n<a name="api_nan_return_null"></a>\n### NanReturnNull()\n\nUse `NanReturnNull` when you want to return `Null` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnNull();\n}\n```\n\n<a name="api_nan_return_empty_string"></a>\n### NanReturnEmptyString()\n\nUse `NanReturnEmptyString` when you want to return an empty `String` from your V8 accessible method:\n\n```c++\nNAN_METHOD(Foo::Baz) {\n  ...\n\n  NanReturnEmptyString();\n}\n```\n\n<a name="api_nan_scope"></a>\n### NanScope()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanScope()` necessary, use it in place of `HandleScope scope`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanScope();\n\n  NanReturnValue(String::New("FooBar!"));\n}\n```\n\n<a name="api_nan_locker"></a>\n### NanLocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanLocker()` necessary, use it in place of `Locker locker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_unlocker"></a>\n### NanUnlocker()\n\nThe introduction of `isolate` references for many V8 calls in Node 0.11 makes `NanUnlocker()` necessary, use it in place of `Unlocker unlocker`:\n\n```c++\nNAN_METHOD(Foo::Bar) {\n  NanLocker();\n  ...\n  NanUnlocker();\n}\n```\n\n<a name="api_nan_get_internal_field_pointer"></a>\n### void * NanGetInternalFieldPointer(Handle&lt;Object&gt;, int)\n\nGets a pointer to the internal field with at `index` from a V8 `Object` handle.\n\n```c++\nLocal<Object> obj;\n...\nNanGetInternalFieldPointer(obj, 0);\n```\n<a name="api_nan_set_internal_field_pointer"></a>\n### void NanSetInternalFieldPointer(Handle&lt;Object&gt;, int, void *)\n\nSets the value of the internal field at `index` on a V8 `Object` handle.\n\n```c++\nstatic Persistent<Function> dataWrapperCtor;\n...\nLocal<Object> wrapper = NanPersistentToLocal(dataWrapperCtor)->NewInstance();\nNanSetInternalFieldPointer(wrapper, 0, this);\n```\n\n<a name="api_nan_object_wrap_handle"></a>\n### Local&lt;Object&gt; NanObjectWrapHandle(Object)\n\nWhen you want to fetch the V8 object handle from a native object you\'ve wrapped with Node\'s `ObjectWrap`, you should use `NanObjectWrapHandle`:\n\n```c++\nNanObjectWrapHandle(iterator)->Get(String::NewSymbol("end"))\n```\n\n<a name="api_nan_make_weak"></a>\n### NanMakeWeak(Persistent&lt;T&gt;, parameter, callback)\n\nMake a persistent reference weak.\n\n<a name="api_nan_symbol"></a>\n### String NanSymbol(char *)\n\nThis isn\'t strictly about compatibility, it\'s just an easier way to create string symbol objects (i.e. `String::NewSymbol(x)`), for getting and setting object properties, or names of objects.\n\n```c++\nbool foo = false;\nif (obj->Has(NanSymbol("foo")))\n  foo = optionsObj->Get(NanSymbol("foo"))->BooleanValue()\n```\n\n<a name="api_nan_get_pointer_safe"></a>\n### Type NanGetPointerSafe(Type *[, Type])\n\nA helper for getting values from optional pointers. If the pointer is `NULL`, the function returns the optional default value, which defaults to `0`.  Otherwise, the function returns the value the pointer points to.\n\n```c++\nchar *plugh(uint32_t *optional) {\n  char res[] = "xyzzy";\n  uint32_t param = NanGetPointerSafe<uint32_t>(optional, 0x1337);\n  switch (param) {\n    ...\n  }\n  NanSetPointerSafe<uint32_t>(optional, 0xDEADBEEF);\n}  \n```\n\n<a name="api_nan_set_pointer_safe"></a>\n### bool NanSetPointerSafe(Type *, Type)\n\nA helper for setting optional argument pointers. If the pointer is `NULL`, the function simply return `false`.  Otherwise, the value is assigned to the variable the pointer points to.\n\n```c++\nconst char *plugh(size_t *outputsize) {\n  char res[] = "xyzzy";\n  if !(NanSetPointerSafe<size_t>(outputsize, strlen(res) + 1)) {\n    ...\n  }\n\n  ...\n}\n```\n\n<a name="api_nan_raw_string"></a>\n### void* NanRawString(Handle&lt;Value&gt;, enum Nan::Encoding, size_t *, void *, size_t, int)\n\nWhen you want to convert a V8 `String` to a `char*` buffer, use `NanRawString`. You have to supply an encoding as well as a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows setting `String::WriteOptions`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nvoid* decoded = NanRawString(args[1], Nan::BASE64, &count, NULL, 0, String::HINT_MANY_WRITES_EXPECTED);\nchar param_copy[count];\nmemcpy(param_copy, decoded, count);\ndelete[] decoded;\n```\n\n<a name="api_nan_c_string"></a>\n### char* NanCString(Handle&lt;Value&gt;, size_t *[, char *, size_t, int])\n\nWhen you want to convert a V8 `String` to a null-terminated C `char*` use `NanCString`. The resulting `char*` will be UTF-8-encoded, and you need to supply a pointer to a variable that will be assigned the number of bytes in the returned string. It is also possible to supply a buffer and its length to the function in order not to have a new buffer allocated. The final argument allows optionally setting `String::WriteOptions`, which default to `v8::String::NO_OPTIONS`.\nJust remember that you\'ll end up with an object that you\'ll need to `delete[]` at some point unless you supply your own buffer:\n\n```c++\nsize_t count;\nchar* name = NanCString(args[0], &count);\n```\n\n<a name="api_nan_from_v8_string"></a>\n### char* NanFromV8String(Handle&lt;Value&gt;[, enum Nan::Encoding, size_t *, char *, size_t, int])\n\nA convenience function that uses `NanRawString()` to convert a V8 `String` to a `char*`. Defaults to UTF8 encoding and no null-termination.\n\n```c++\nsize_t count;\nchar* name = NanFromV8String(args[0]);\n```\n\n<a name="api_nan_boolean_option_value"></a>\n### bool NanBooleanOptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;[, bool])\n\nWhen you have an "options" object that you need to fetch properties from, boolean options can be fetched with this pair. They check first if the object exists (`IsEmpty`), then if the object has the given property (`Has`) then they get and convert/coerce the property to a `bool`.\n\nThe optional last parameter is the *default* value, which is `false` if left off:\n\n```c++\n// `foo` is false unless the user supplies a truthy value for it\nbool foo = NanBooleanOptionValue(optionsObj, NanSymbol("foo"));\n// `bar` is true unless the user supplies a falsy value for it\nbool bar = NanBooleanOptionValueDefTrue(optionsObj, NanSymbol("bar"), true);\n```\n\n<a name="api_nan_uint32_option_value"></a>\n### uint32_t NanUInt32OptionValue(Handle&lt;Value&gt;, Handle&lt;String&gt;, uint32_t)\n\nSimilar to `NanBooleanOptionValue`, use `NanUInt32OptionValue` to fetch an integer option from your options object. Can be any kind of JavaScript `Number` and it will be coerced to an unsigned 32-bit integer.\n\nRequires all 3 arguments as a default is not optional:\n\n```c++\nuint32_t count = NanUInt32OptionValue(optionsObj, NanSymbol("count"), 1024);\n```\n\n<a name="api_nan_error"></a>\n### NanError(message), NanTypeError(message), NanRangeError(message)\n\nFor making `Error`, `TypeError` and `RangeError` objects.\n\n```c++\nLocal<Value> res = NanError("you must supply a callback argument");\n```\n\n<a name="api_nan_throw_error"></a>\n### NanThrowError(message), NanThrowTypeError(message), NanThrowRangeError(message), NanThrowError(Local&lt;Value&gt;), NanThrowError(Local&lt;Value&gt;, int)\n\nFor throwing `Error`, `TypeError` and `RangeError` objects. You should `return` this call:\n\n```c++\nreturn NanThrowError("you must supply a callback argument");\n```\n\nCan also handle any custom object you may want to throw. If used with the error code argument, it will add the supplied error code to the error object as a property called `code`.\n\n<a name="api_nan_new_buffer_handle"></a>\n### Local&lt;Object&gt; NanNewBufferHandle(char *, uint32_t), Local&lt;Object&gt; NanNewBufferHandle(uint32_t)\n\nThe `Buffer` API has changed a little in Node 0.11, this helper provides consistent access to `Buffer` creation:\n\n```c++\nNanNewBufferHandle((char*)value.data(), value.size());\n```\n\nCan also be used to initialize a `Buffer` with just a `size` argument.\n\nCan also be supplied with a `NAN_WEAK_CALLBACK` and a hint for the garbage collector, when dealing with weak references.\n\n<a name="api_nan_buffer_use"></a>\n### Local&lt;Object&gt; NanBufferUse(char*, uint32_t)\n\n`Buffer::New(char*, uint32_t)` prior to 0.11 would make a copy of the data.\nWhile it was possible to get around this, it required a shim by passing a\ncallback. So the new API `Buffer::Use(char*, uint32_t)` was introduced to remove\nneeding to use this shim.\n\n`NanBufferUse` uses the `char*` passed as the backing data, and will free the\nmemory automatically when the weak callback is called. Keep this in mind, as\ncareless use can lead to "double free or corruption" and other cryptic failures.\n\n<a name="api_nan_has_instance"></a>\n### bool NanHasInstance(Persistent&lt;FunctionTemplate&gt;&, Handle&lt;Value&gt;)\n\nCan be used to check the type of an object to determine it is of a particular class you have already defined and have a `Persistent<FunctionTemplate>` handle for.\n\n<a name="api_nan_persistent_to_local"></a>\n### Local&lt;Type&gt; NanPersistentToLocal(Persistent&lt;Type&gt;&)\n\nAside from `FunctionCallbackInfo`, the biggest and most painful change to V8 in Node 0.11 is the many restrictions now placed on `Persistent` handles. They are difficult to assign and difficult to fetch the original value out of.\n\nUse `NanPersistentToLocal` to convert a `Persistent` handle back to a `Local` handle.\n\n```c++\nLocal<Object> handle = NanPersistentToLocal(persistentHandle);\n```\n\n<a href="#api_nan_new_context_handle">\n### Local&lt;Context&gt; NanNewContextHandle([ExtensionConfiguration*, Handle&lt;ObjectTemplate&gt;, Handle&lt;Value&gt;])\nCreates a new `Local<Context>` handle.\n\n```c++\nLocal<FunctionTemplate> ftmpl = FunctionTemplate::New();\nLocal<ObjectTemplate> otmpl = ftmpl->InstanceTemplate();\nLocal<Context> ctx =  NanNewContextHandle(NULL, otmpl);\n```\n\n<a name="api_nan_dispose_persistent"></a>\n### void NanDisposePersistent(Persistent&lt;T&gt; &)\n\nUse `NanDisposePersistent` to dispose a `Persistent` handle.\n\n```c++\nNanDisposePersistent(persistentHandle);\n```\n\n<a name="api_nan_assign_persistent"></a>\n### NanAssignPersistent(type, handle, object)\n\nUse `NanAssignPersistent` to assign a non-`Persistent` handle to a `Persistent` one. You can no longer just declare a `Persistent` handle and assign directly to it later, you have to `Reset` it in Node 0.11, so this makes it easier.\n\nIn general it is now better to place anything you want to protect from V8\'s garbage collector as properties of a generic `Object` and then assign that to a `Persistent`. This works in older versions of Node also if you use `NanAssignPersistent`:\n\n```c++\nPersistent<Object> persistentHandle;\n\n...\n\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanAssignPersistent(Object, persistentHandle, obj)\n```\n\n<a name="api_nan_init_persistent"></a>\n### NanInitPersistent(type, name, object)\n\nUser `NanInitPersistent` to declare and initialize a new `Persistent` with the supplied object. The assignment operator for `Persistent` is no longer public in Node 0.11, so this macro makes it easier to declare and initializing a new `Persistent`. See <a href="#api_nan_assign_persistent"><b><code>NanAssignPersistent</code></b></a> for more information.\n\n```c++\nLocal<Object> obj = Object::New();\nobj->Set(NanSymbol("key"), keyHandle); // where keyHandle might be a Local<String>\nNanInitPersistent(Object, persistentHandle, obj);\n```\n\n<a name="api_nan_callback"></a>\n### NanCallback\n\nBecause of the difficulties imposed by the changes to `Persistent` handles in V8 in Node 0.11, creating `Persistent` versions of your `Handle<Function>` is annoyingly tricky. `NanCallback` makes it easier by taking your handle, making it persistent until the `NanCallback` is deleted and even providing a handy `Call()` method to fetch and execute the callback `Function`.\n\n```c++\nLocal<Function> callbackHandle = args[0].As<Function>();\nNanCallback *callback = new NanCallback(callbackHandle);\n// pass `callback` around and it\'s safe from GC until you:\ndelete callback;\n```\n\nYou can execute the callback like so:\n\n```c++\n// no arguments:\ncallback->Call(0, NULL);\n\n// an error argument:\nHandle<Value> argv[] = {\n  Exception::Error(String::New("fail!"))\n};\ncallback->Call(1, argv);\n\n// a success argument:\nHandle<Value> argv[] = {\n  Null(),\n  String::New("w00t!")\n};\ncallback->Call(2, argv);\n```\n\n`NanCallback` also has a `Local<Function> GetCallback()` method that you can use\nto fetch a local handle to the underlying callback function, as well  as a\n`void SetFunction(Handle<Function>)` for setting the callback on the\n`NanCallback`.  Additionally a generic constructor is available for using\n`NanCallback` without performing heap allocations.\n\n<a name="api_nan_async_worker"></a>\n### NanAsyncWorker\n\n`NanAsyncWorker` is an abstract class that you can subclass to have much of the annoying async queuing and handling taken care of for you. It can even store arbitrary V8 objects for you and have them persist while the async work is in progress.\n\nSee a rough outline of the implementation:\n\n```c++\nclass NanAsyncWorker {\npublic:\n  NanAsyncWorker (NanCallback *callback);\n\n  // Clean up persistent handles and delete the *callback\n  virtual ~NanAsyncWorker ();\n\n  // Check the `char *errmsg` property and call HandleOKCallback()\n  // or HandleErrorCallback depending on whether it has been set or not\n  virtual void WorkComplete ();\n\n  // You must implement this to do some async work. If there is an\n  // error then allocate `errmsg` to to a message and the callback will\n  // be passed that string in an Error object\n  virtual void Execute ();\n\n  // Save a V8 object in a Persistent handle to protect it from GC\n  void SavePersistent(const char *key, Local<Object> &obj);\n\n  // Fetch a stored V8 object (don\'t call from within `Execute()`)\n  Local<Object> GetFromPersistent(const char *key);\n\nprotected:\n  // Set this if there is an error, otherwise it\'s NULL\n  const char *errmsg;\n\n  // Default implementation calls the callback function with no arguments.\n  // Override this to return meaningful data\n  virtual void HandleOKCallback ();\n\n  // Default implementation calls the callback function with an Error object\n  // wrapping the `errmsg` string\n  virtual void HandleErrorCallback ();\n};\n```\n\n<a name="api_nan_async_queue_worker"></a>\n### NanAsyncQueueWorker(NanAsyncWorker *)\n\n`NanAsyncQueueWorker` will run a `NanAsyncWorker` asynchronously via libuv. Both the *execute* and *after_work* steps are taken care of for you&mdash;most of the logic for this is embedded in `NanAsyncWorker`.\n\n### Contributors\n\nNAN is only possible due to the excellent work of the following contributors:\n\n<table><tbody>\n<tr><th align="left">Rod Vagg</th><td><a href="https://github.com/rvagg">GitHub/rvagg</a></td><td><a href="http://twitter.com/rvagg">Twitter/@rvagg</a></td></tr>\n<tr><th align="left">Benjamin Byholm</th><td><a href="https://github.com/kkoopa/">GitHub/kkoopa</a></td></tr>\n<tr><th align="left">Trevor Norris</th><td><a href="https://github.com/trevnorris">GitHub/trevnorris</a></td><td><a href="http://twitter.com/trevnorris">Twitter/@trevnorris</a></td></tr>\n<tr><th align="left">Nathan Rajlich</th><td><a href="https://github.com/TooTallNate">GitHub/TooTallNate</a></td><td><a href="http://twitter.com/TooTallNate">Twitter/@TooTallNate</a></td></tr>\n<tr><th align="left">Brett Lawson</th><td><a href="https://github.com/brett19">GitHub/brett19</a></td><td><a href="http://twitter.com/brett19x">Twitter/@brett19x</a></td></tr>\n<tr><th align="left">Ben Noordhuis</th><td><a href="https://github.com/bnoordhuis">GitHub/bnoordhuis</a></td><td><a href="http://twitter.com/bnoordhuis">Twitter/@bnoordhuis</a></td></tr>\n</tbody></table>\n\nLicence &amp; copyright\n-----------------------\n\nCopyright (c) 2013 NAN contributors (listed above).\n\nNative Abstractions for Node.js is licensed under an MIT +no-false-attribs license. All rights not explicitly granted in the MIT license are reserved. See the included LICENSE file for more details.\n',
120 silly resolved     readmeFilename: 'README.md',
120 silly resolved     bugs: { url: 'https://github.com/rvagg/nan/issues' },
120 silly resolved     homepage: 'https://github.com/rvagg/nan',
120 silly resolved     _id: 'nan@0.8.0',
120 silly resolved     _from: 'nan@~0.8.0' },
120 silly resolved   { name: 'bindings',
120 silly resolved     description: 'Helper module for loading your native module\'s .node file',
120 silly resolved     keywords: [ 'native', 'addon', 'bindings', 'gyp', 'waf', 'c', 'c++' ],
120 silly resolved     version: '1.1.1',
120 silly resolved     author:
120 silly resolved      { name: 'Nathan Rajlich',
120 silly resolved        email: 'nathan@tootallnate.net',
120 silly resolved        url: 'http://tootallnate.net' },
120 silly resolved     repository:
120 silly resolved      { type: 'git',
120 silly resolved        url: 'git://github.com/TooTallNate/node-bindings.git' },
120 silly resolved     main: './bindings.js',
120 silly resolved     readme: 'node-bindings\n=============\n### Helper module for loading your native module\'s .node file\n\nThis is a helper module for authors of Node.js native addon modules.\nIt is basically the "swiss army knife" of `require()`ing your native module\'s\n`.node` file.\n\nThroughout the course of Node\'s native addon history, addons have ended up being\ncompiled in a variety of different places, depending on which build tool and which\nversion of node was used. To make matters worse, now the _gyp_ build tool can\nproduce either a _Release_ or _Debug_ build, each being built into different\nlocations.\n\nThis module checks _all_ the possible locations that a native addon would be built\nat, and returns the first one that loads successfully.\n\n\nInstallation\n------------\n\nInstall with `npm`:\n\n``` bash\n$ npm install bindings\n```\n\nOr add it to the `"dependencies"` section of your _package.json_ file.\n\n\nExample\n-------\n\n`require()`ing the proper bindings file for the current node version, platform\nand architecture is as simple as:\n\n``` js\nvar bindings = require(\'bindings\')(\'binding.node\')\n\n// Use your bindings defined in your C files\nbindings.your_c_function()\n```\n\n\nNice Error Output\n-----------------\n\nWhen the `.node` file could not be loaded, `node-bindings` throws an Error with\na nice error message telling you exactly what was tried. You can also check the\n`err.tries` Array property.\n\n```\nError: Could not load the bindings file. Tried:\n → /Users/nrajlich/ref/build/binding.node\n → /Users/nrajlich/ref/build/Debug/binding.node\n → /Users/nrajlich/ref/build/Release/binding.node\n → /Users/nrajlich/ref/out/Debug/binding.node\n → /Users/nrajlich/ref/Debug/binding.node\n → /Users/nrajlich/ref/out/Release/binding.node\n → /Users/nrajlich/ref/Release/binding.node\n → /Users/nrajlich/ref/build/default/binding.node\n → /Users/nrajlich/ref/compiled/0.8.2/darwin/x64/binding.node\n    at bindings (/Users/nrajlich/ref/node_modules/bindings/bindings.js:84:13)\n    at Object.<anonymous> (/Users/nrajlich/ref/lib/ref.js:5:47)\n    at Module._compile (module.js:449:26)\n    at Object.Module._extensions..js (module.js:467:10)\n    at Module.load (module.js:356:32)\n    at Function.Module._load (module.js:312:12)\n    ...\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2012 Nathan Rajlich &lt;nathan@tootallnate.net&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
120 silly resolved     readmeFilename: 'README.md',
120 silly resolved     bugs: { url: 'https://github.com/TooTallNate/node-bindings/issues' },
120 silly resolved     homepage: 'https://github.com/TooTallNate/node-bindings',
120 silly resolved     _id: 'bindings@1.1.1',
120 silly resolved     _from: 'bindings@*' } ]
121 info install nan@0.8.0 into /usr/local/lib/node_modules/contextify
122 info install bindings@1.1.1 into /usr/local/lib/node_modules/contextify
123 info installOne nan@0.8.0
124 info installOne bindings@1.1.1
125 info /usr/local/lib/node_modules/contextify/node_modules/nan unbuild
126 info /usr/local/lib/node_modules/contextify/node_modules/bindings unbuild
127 verbose tar unpack /Users/nunohora/.npm/nan/0.8.0/package.tgz
128 silly lockFile 68287435-ules-contextify-node-modules-nan tar:///usr/local/lib/node_modules/contextify/node_modules/nan
129 verbose lock tar:///usr/local/lib/node_modules/contextify/node_modules/nan /Users/nunohora/.npm/68287435-ules-contextify-node-modules-nan.lock
130 silly lockFile 6da6f175-nohora-npm-nan-0-8-0-package-tgz tar:///Users/nunohora/.npm/nan/0.8.0/package.tgz
131 verbose lock tar:///Users/nunohora/.npm/nan/0.8.0/package.tgz /Users/nunohora/.npm/6da6f175-nohora-npm-nan-0-8-0-package-tgz.lock
132 verbose tar unpack /Users/nunohora/.npm/bindings/1.1.1/package.tgz
133 silly lockFile ff1dd6dd-contextify-node-modules-bindings tar:///usr/local/lib/node_modules/contextify/node_modules/bindings
134 verbose lock tar:///usr/local/lib/node_modules/contextify/node_modules/bindings /Users/nunohora/.npm/ff1dd6dd-contextify-node-modules-bindings.lock
135 silly lockFile 7c8f4518-a-npm-bindings-1-1-1-package-tgz tar:///Users/nunohora/.npm/bindings/1.1.1/package.tgz
136 verbose lock tar:///Users/nunohora/.npm/bindings/1.1.1/package.tgz /Users/nunohora/.npm/7c8f4518-a-npm-bindings-1-1-1-package-tgz.lock
137 silly gunzTarPerm modes [ '755', '644' ]
138 silly gunzTarPerm modes [ '755', '644' ]
139 silly gunzTarPerm extractEntry package.json
140 silly gunzTarPerm extractEntry package.json
141 silly gunzTarPerm extractEntry README.md
142 silly gunzTarPerm extractEntry LICENSE
143 silly gunzTarPerm extractEntry include_dirs.js
144 silly gunzTarPerm extractEntry .dntrc
145 silly gunzTarPerm extractEntry build/config.gypi
146 silly gunzTarPerm extractEntry nan.h
147 silly gunzTarPerm extractEntry README.md
148 silly gunzTarPerm extractEntry bindings.js
149 silly lockFile ff1dd6dd-contextify-node-modules-bindings tar:///usr/local/lib/node_modules/contextify/node_modules/bindings
150 silly lockFile ff1dd6dd-contextify-node-modules-bindings tar:///usr/local/lib/node_modules/contextify/node_modules/bindings
151 silly lockFile 7c8f4518-a-npm-bindings-1-1-1-package-tgz tar:///Users/nunohora/.npm/bindings/1.1.1/package.tgz
152 silly lockFile 7c8f4518-a-npm-bindings-1-1-1-package-tgz tar:///Users/nunohora/.npm/bindings/1.1.1/package.tgz
153 info preinstall bindings@1.1.1
154 verbose readDependencies using package.json deps
155 verbose readDependencies using package.json deps
156 silly resolved []
157 verbose about to build /usr/local/lib/node_modules/contextify/node_modules/bindings
158 info build /usr/local/lib/node_modules/contextify/node_modules/bindings
159 verbose linkStuff [ true,
159 verbose linkStuff   '/usr/local/lib/node_modules',
159 verbose linkStuff   false,
159 verbose linkStuff   '/usr/local/lib/node_modules/contextify/node_modules' ]
160 info linkStuff bindings@1.1.1
161 verbose linkBins bindings@1.1.1
162 verbose linkMans bindings@1.1.1
163 verbose rebuildBundles bindings@1.1.1
164 info install bindings@1.1.1
165 info postinstall bindings@1.1.1
166 silly lockFile 68287435-ules-contextify-node-modules-nan tar:///usr/local/lib/node_modules/contextify/node_modules/nan
167 silly lockFile 68287435-ules-contextify-node-modules-nan tar:///usr/local/lib/node_modules/contextify/node_modules/nan
168 silly lockFile 6da6f175-nohora-npm-nan-0-8-0-package-tgz tar:///Users/nunohora/.npm/nan/0.8.0/package.tgz
169 silly lockFile 6da6f175-nohora-npm-nan-0-8-0-package-tgz tar:///Users/nunohora/.npm/nan/0.8.0/package.tgz
170 info preinstall nan@0.8.0
171 verbose readDependencies using package.json deps
172 verbose readDependencies using package.json deps
173 silly resolved []
174 verbose about to build /usr/local/lib/node_modules/contextify/node_modules/nan
175 info build /usr/local/lib/node_modules/contextify/node_modules/nan
176 verbose linkStuff [ true,
176 verbose linkStuff   '/usr/local/lib/node_modules',
176 verbose linkStuff   false,
176 verbose linkStuff   '/usr/local/lib/node_modules/contextify/node_modules' ]
177 info linkStuff nan@0.8.0
178 verbose linkBins nan@0.8.0
179 verbose linkMans nan@0.8.0
180 verbose rebuildBundles nan@0.8.0
181 info install nan@0.8.0
182 info postinstall nan@0.8.0
183 verbose about to build /usr/local/lib/node_modules/contextify
184 info build /usr/local/lib/node_modules/contextify
185 verbose linkStuff [ true,
185 verbose linkStuff   '/usr/local/lib/node_modules',
185 verbose linkStuff   true,
185 verbose linkStuff   '/usr/local/lib/node_modules' ]
186 info linkStuff contextify@0.1.7
187 verbose linkBins contextify@0.1.7
188 verbose linkMans contextify@0.1.7
189 verbose rebuildBundles contextify@0.1.7
190 verbose rebuildBundles [ 'bindings', 'nan' ]
191 info install contextify@0.1.7
192 verbose unsafe-perm in lifecycle false
193 info contextify@0.1.7 Failed to exec install script
194 info /usr/local/lib/node_modules/contextify unbuild
195 info preuninstall contextify@0.1.7
196 info uninstall contextify@0.1.7
197 verbose true,/usr/local/lib/node_modules,/usr/local/lib/node_modules unbuild contextify@0.1.7
198 info postuninstall contextify@0.1.7
199 error contextify@0.1.7 install: `node-gyp rebuild`
199 error Exit status 1
200 error Failed at the contextify@0.1.7 install script.
200 error This is most likely a problem with the contextify package,
200 error not with npm itself.
200 error Tell the author that this fails on your system:
200 error     node-gyp rebuild
200 error You can get their info via:
200 error     npm owner ls contextify
200 error There is likely additional logging output above.
201 error System Darwin 13.0.0
202 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "-g" "contextify"
203 error cwd /Users/nunohora/Sites/bitbot/node_modules
204 error node -v v0.10.26
205 error npm -v 1.4.3
206 error code ELIFECYCLE
207 verbose exit [ 1, true ]
